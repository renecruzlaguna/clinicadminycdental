<?php

namespace AppBundle\Repository;

/**
 * VisitaRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConsultaRepository extends \AppBundle\Libs\Repository\BaseRepository {

    public function getBaseQuery($baseEntity, $start = 0, $limit = 30, $filters = array(), $columnsAlias = array(), $decorator = ResultDecorator::DEFAULT_DECORATOR) {
        
    }

    function getAllQueryByDoctor($id, $day, $month, $year) {
        $qb = $this->createQueryBuilder('query')
                ->join('query.usuario', 'usuario');
        $qb->andWhere($qb->expr()->eq('usuario', '?1'));
        $qb->andWhere($qb->expr()->eq('query.dia', '?2'));
        $qb->andWhere($qb->expr()->eq('query.mes', '?3'));
        $qb->andWhere($qb->expr()->eq('query.anno', '?4'));

        $qb->setParameter(1, $id);
        $qb->setParameter(2, $day);
        $qb->setParameter(3, $month);
        $qb->setParameter(4, $year);
        $result = $qb->getQuery()->getResult();
        // $qb->OrderBy('query.horaInicial', 'ASC');
        usort($result, function($a, $b) {
            return strcmp($a->getHoraInicialC() . $a->getMinutoInicialC() . $a->getHoraFinalC() . $b->getMinutoFinalC(), $b->getHoraInicialC() . $b->getMinutoInicialC() . $b->getHoraFinalC() . $b->getMinutoFinalC());
        });
        return $result;
    }

    public function getAllQueryByStateAndDoctor($state = -1, $initialDate = -1, $endDate = -1, $doctor = -1) {

        $qb = $this->createQueryBuilder('query');
        if ($state != -1) {
            $qb->join('query.estado', 'estado');


            $qb->andWhere($qb->expr()->eq('estado', '?3'));
            $qb->setParameter(3, $state);
        }
        $this->addValuesDates($initialDate, $endDate, $qb);

        if ($doctor != -1) {
            $qb->join('query.usuario', 'usuario');
            $qb->andWhere($qb->expr()->eq('usuario', '?2'));
            $qb->setParameter(2, $doctor);
        }


        $qb->OrderBy('query.anno', 'DESC');
        $qb->addOrderBy('query.mes', 'DESC');
        $qb->addOrderBy('query.dia', 'DESC');
        $qb->distinct();


        return $qb->getQuery()->getResult();
    }

    public function getAllQueryByDoctorOrSpecility($especiality = -1, $doctor = -1) {
        $qb = $this->createQueryBuilder('query');
        $qb->join('query.estado', 'estado');
        $qb->andWhere($qb->expr()->eq('estado', '?3'));
        $qb->setParameter(3, 4);
        if ($especiality != -1) {
            $qb->join('query.especialidad', 'especialidad');
            $qb->andWhere($qb->expr()->eq('especialidad', '?1'));
            $qb->setParameter(1, $especiality);
        }
        if ($doctor != -1) {
            $qb->join('query.usuario', 'usuario');
            $qb->andWhere($qb->expr()->eq('usuario', '?2'));
            $qb->setParameter(2, $doctor);
        }
        return $qb->getQuery()->getResult();
    }

    public function getAllQueryByState($state = -1, $initialDate = -1, $endDate = -1) {
        $qb = $this->createQueryBuilder('query');
        $qb->join('query.estado', 'estado');

        if ($state != -1) {
            $qb->andWhere($qb->expr()->eq('estado', '?3'));
            $qb->setParameter(3, $state);
        }
        $this->addValuesDates($initialDate, $endDate, $qb);

        return $qb->getQuery()->getResult();
    }

    public function getQueriesForIndex($state, $initialDate = -1, $endDate = -1, $today = null, $useDoctor = -1) {
        $qb = $this->createQueryBuilder('query');
        $qb->join('query.estado', 'estado');
        $qb->join('query.usuarioRegistro', 'usuarioRegistro');
        if ($initialDate == -1 && $endDate == -1) {
            $date = new \DateTime('now');
            $initialDate = $date->format('Y') . '-' . $date->format('m') . '-' . $date->format('d');
            $endDate = $initialDate;
        }

        $qb->andWhere($qb->expr()->eq('estado', '?3'));
        $qb->setParameter(3, $state);

        $qb->join('query.especialidad', 'especialidad');
        if ($useDoctor != -1) {
            $qb->join('query.usuario', 'usuario');
            $qb->andWhere($qb->expr()->eq('usuario', '?4'));
            $qb->setParameter(4, $useDoctor);
        }
        if ($initialDate != -1 && strrpos($initialDate, '-') !== false) {
            $dateI = explode('-', $initialDate);
            $qb->andWhere($qb->expr()->gte('query.dia', ($dateI[2])));
            $qb->andWhere($qb->expr()->gte('query.mes', ($dateI[1])));
            $qb->andWhere($qb->expr()->gte('query.anno', ($dateI[0])));
        }

        if ($endDate != -1 && strrpos($endDate, '-') !== false) {
            $dateI = explode('-', $endDate);
            $qb->andWhere($qb->expr()->lte('query.dia', ($dateI[2])));
            $qb->andWhere($qb->expr()->lte('query.mes', ($dateI[1])));
            $qb->andWhere($qb->expr()->lte('query.anno', ($dateI[0])));
        }
        if ($today != null) {
            $date = new \DateTime();

            $qb->andWhere($qb->expr()->eq('query.dia', ($date->format('d'))));
            $qb->andWhere($qb->expr()->eq('query.mes', ($date->format('m'))));
            $qb->andWhere($qb->expr()->eq('query.anno', ($date->format('Y'))));
        }
        $qb->addOrderBy('usuarioRegistro.id');
        $qb->addOrderBy('query.fechaCompleta');


        return $qb->getQuery()->getResult();
    }

    public function getTotalMonyQuery($speciality = -1, $doctor = -1, $initialDate = -1, $endDate = -1) {
        $qb = $this->createQueryBuilder('query');
        $qb->join('query.estado', 'estado');
        $qb->join('query.factura', 'factura');


        $qb->andWhere($qb->expr()->eq('estado', '?3'));
        $qb->setParameter(3, 4);
        if ($speciality != -1) {
            $qb->join('query.especialidad', 'especialidad');
            $qb->andWhere($qb->expr()->eq('especialidad', '?1'));
            $qb->setParameter(1, $speciality);
        }
        if ($doctor != -1) {
            $qb->join('query.usuario', 'usuario');
            $qb->andWhere($qb->expr()->eq('usuario', '?2'));
            $qb->setParameter(2, $doctor);
        }
        $this->addValuesDates($initialDate, $endDate, $qb);

        return $qb->getQuery()->getResult();
    }

    public function getTotalMonySalaryQuery($speciality = -1, $doctor = -1, $initialDate = -1, $endDate = -1) {

        $qb = $this->createQueryBuilder('query');
        $qb->join('query.estado', 'estado');
        $qb->join('query.factura', 'factura');

        $qb->join('query.usuario', 'usuario');


        $qb->andWhere($qb->expr()->eq('estado', '?3'));
        $qb->setParameter(3, 4);
        if ($speciality != -1) {
            $qb->join('query.especialidad', 'especialidad');
            $qb->andWhere($qb->expr()->eq('especialidad', '?1'));
            $qb->setParameter(1, $speciality);
        }
        if ($doctor != -1) {
            $qb->andWhere($qb->expr()->eq('usuario', '?2'));
            $qb->setParameter(2, $doctor);
        }
        $this->addValuesDates($initialDate, $endDate, $qb);
        $qb->OrderBy('query.usuario', 'DESC');
        $qb->addOrderBy('query.anno', 'ASC');
        $qb->addOrderBy('query.mes', 'ASC');
        $qb->addOrderBy('query.dia', 'ASC');
//         print_r($qb->getQuery()->getSQL());
//         die;

        $result = $qb->getQuery()->getResult();

        $length = count($result);
        $resultNew = array();
        $total = 0;
        for ($i = 0; $i < $length; $i++) {

            $total += $result[$i]->getFactura()->getTotal();

            $resultNew[] = $result[$i];
            if ($i + 1 != $length) {
                $first = $result[$i]->getUsuario()->getId();
                $next = $result[$i + 1]->getUsuario()->getId();
                if ($first != $next) {
                    $doctor = $result[$i]->getUsuario();

                    $doctorSalary = array('nombremedico' => $doctor->getCompleteName(), 'salario' => $doctor->getSalario(), 'total' => $total,
                        'porciento' => $doctor->getPorciento());
                    $pagar = $doctorSalary['salario'];

                    $pagar = $pagar + (($doctorSalary['total'] * $doctorSalary['porciento']) / 100);
                    $doctorSalary['pagar'] = $pagar;
                    $total = 0;
                    $resultNew[] = $doctorSalary;
                }
            } else {
                if ($total != 0) {
                    $doctor = $result[$i]->getUsuario();

                    $doctorSalary = array('nombremedico' => $doctor->getCompleteName(), 'salario' => $doctor->getSalario(), 'total' => $total,
                        'porciento' => $doctor->getPorciento());
                    $pagar = $doctorSalary['salario'];

                    $pagar = $pagar + (($doctorSalary['total'] * $doctorSalary['porciento']) / 100);
                    $doctorSalary['pagar'] = $pagar;
                    $resultNew[] = $doctorSalary;
                }
            }
        }
        return $resultNew;
    }

    public function getTotalMonyQueryToGraphicForDay($speciality = -1, $date) {
        $qb = $this->createQueryBuilder('query');
        $qb->join('query.estado', 'estado');
        $qb->join('query.factura', 'factura');


        $qb->andWhere($qb->expr()->eq('estado', '?3'));
        $qb->setParameter(3, 4);
        if ($speciality != -1) {
            $qb->join('query.especialidad', 'especialidad');
            $qb->andWhere($qb->expr()->eq('especialidad', '?1'));
            $qb->setParameter(1, $speciality);
        }


        $this->addValuesDates($date, $date, $qb);
        $result = 0;
        $data = $qb->getQuery()->getResult();
        foreach ($data as $value) {
            $result += $value->getFactura()->getValueTotal();
        }
        return $result;
    }

    public function getAllQueryCancelByPatient($patient = -1) {
        $qb = $this->createQueryBuilder('query');
        $qb->join('query.estado', 'estado');
        $qb->andWhere($qb->expr()->eq('estado', '?3'));
        $qb->setParameter(3, 3);

        if ($patient != -1) {
            $qb->join('query.usuarioRegistro', 'usuarioRegistro');
            $qb->andWhere($qb->expr()->eq('usuarioRegistro', '?2'));
            $qb->setParameter(2, $patient);
        }
        $qb->addOrderBy('query.usuarioRegistro');
        return $qb->getQuery()->getResult();
    }

    /* Consultas para mannana */

    public function getQueryToTomorrow() {
        $date = new \DateTime('tomorrow');
        $day = $date->format('d');
        $month = $date->format('m');
        $year = $date->format('Y');

        /* se listan solo las consultas que se han aceptado para el dia de mannana */
        $qb = $this->createQueryBuilder('query');
        $qb->join('query.estado', 'estado');
        $qb->andWhere($qb->expr()->eq('estado', '?1'));
        $qb->andWhere($qb->expr()->eq('query.dia', '?2'));
        $qb->andWhere($qb->expr()->eq('query.mes', '?3'));
        $qb->andWhere($qb->expr()->eq('query.anno', '?4'));

        $qb->setParameter(1, 2);
        $qb->setParameter(2, $day);
        $qb->setParameter(3, $month);
        $qb->setParameter(4, $year);
        return $qb->getQuery()->getResult();
    }

//no se usa
    public function findQueryHour($id, $hour, $hourEnd, $minute, $minuteEnd, $userDoctor, $day, $month, $year) {

        $qb = $this->createQueryBuilder('query');
        $qb->innerJoin('query.usuario', 'usuario');
        $qb->innerJoin('query.estado', 'estado');
        $qb->andWhere($qb->expr()->eq('estado.id', 1) . ' OR ' . $qb->expr()->eq('estado.id', 2));
        if ($hourEnd == -1 && $minuteEnd == -1) {
            if ($minute == 55) {
                $hourEnd = (int) ($$hour + 1);
                $minuteEnd = 0;
            } else {
                $hourEnd = (int) ($hour);
                $minuteEnd = (int) ($minute + 5);
            }
        }
        $qb->where($qb->expr()->eq('query.horaInicial', $hour));
        $qb->andWhere($qb->expr()->eq('query.minutoInicial', $minute) . ' OR ' . $qb->expr()->gt('query.minutoFinal', $minute));
        $qb->andWhere($qb->expr()->eq('query.mes', $month));
        $qb->andWhere($qb->expr()->eq('query.anno', $year));
        $qb->andWhere($qb->expr()->eq('query.dia', $day));
        if ($id != -1) {
            $qb->andWhere($qb->expr()->neq('query.id', $id));
        }

        $qb->andWhere($qb->expr()->eq('usuario.id', $userDoctor));

        $result = $qb->getQuery()->getResult();
        if (count($result) > 0) {
            return $result[count($result) - 1];
        }
        return null;
    }

    private function completeZero($value) {
        if ($value < 10)
            return '0' . $value;
        return $value;
    }

    public function checkQueryHour($id, $hour, $hourEnd, $minute, $minuteEnd, $userDoctor, $day, $month, $year) {

        $qb = $this->createQueryBuilder('query');
        $qb->innerJoin('query.usuario', 'usuario');
        $qb->innerJoin('query.estado', 'estado');
        $qb->andWhere($qb->expr()->eq('estado.id', 1) . ' OR ' . $qb->expr()->eq('estado.id', 2));

        $qb->andWhere($qb->expr()->eq('query.mes', $month));
        $qb->andWhere($qb->expr()->eq('query.anno', $year));
        $qb->andWhere($qb->expr()->eq('query.dia', $day));
        if ($id != -1) {
            $qb->andWhere($qb->expr()->neq('query.id', $id));
        }

        $qb->andWhere($qb->expr()->eq('usuario.id', $userDoctor));

        $result = $qb->getQuery()->getResult();


        if (count($result) == 0) {
            return null;
        }
        foreach ($result as $value) {
            $horaminInicial = $value->getHoraInicialC() . $value->getMinutoInicialC();
            $horaminFinal = $value->getHoraFinalC() . $value->getMinutoFinalC();
            $horaminInicial = (int) $horaminInicial;
            $horaMinuteInicialNew = (int) ($this->completeZero($hour) . $this->completeZero($minute));
            $horaMinuteFinalNew = (int) ($this->completeZero($hourEnd) . $this->completeZero($minuteEnd));
            if ($horaMinuteInicialNew >= $horaminInicial && $horaminFinal >= $horaMinuteFinalNew) {
                
                return $value;
            }
            if ($horaMinuteInicialNew > $horaminInicial && $horaMinuteInicialNew < $horaminFinal) {
               
                return $value;
            }
            if ($horaMinuteInicialNew < $horaminInicial && $horaMinuteInicialNew >= $horaminFinal) {
                 
                return $value;
            }
            if ($horaMinuteFinalNew >$horaminInicial && $horaMinuteFinalNew<=$horaminFinal) {
                
                return $value;
            }
            if ($horaMinuteFinalNew >=$horaminFinal &&$horaMinuteInicialNew<= $horaminInicial) {
                 
                return $value;
            }
        }
    }

    public function getInfoForAdmin($state, $option = 1) {
        $date = new \DateTime('now');
        $month = $date->format('m');
        $year = $date->format('Y');
        if ($option == 1) {

            return $this->createQueryBuilder('query')
                            ->andWhere('query.estado = :estado')
                            ->select('COUNT(query.id) as total')
                            ->andWhere('query.mes=:mes')
                            ->andWhere('query.anno=:anno')
                            ->setParameter('estado', $state)
                            ->setParameter('mes', $month)
                            ->setParameter('anno', $year)
                            ->getQuery()
                            ->getSingleScalarResult();
        } else if ($option == 2) {
            return $this->createQueryBuilder('query')
                            ->andWhere('query.estado = :estado')
                            ->innerJoin('query.factura', 'factura')
                            ->setParameter('estado', $state)
                            ->select('SUM(factura.total) as total')
                            ->getQuery()
                            ->getSingleScalarResult();
        } else {

            return $this->createQueryBuilder('query')
                            ->select('COUNT(query.id) as total')
                            ->andWhere('query.mes=:mes')
                            ->andWhere('query.anno=:anno')
                            ->setParameter('mes', $month)
                            ->setParameter('anno', $year)
                            ->getQuery()
                            ->getSingleScalarResult();
        }
    }

    private function addValuesDates($initialDate = '01-01-2000', $endDate, &$qb) {

        if ($endDate == -1) {
            $endDate = date('m-d-Y', strtotime('+1 year'));
        }
        if ($initialDate == -1) {
            $initialDate = '01-01-2000';
        }

        $qb->andWhere('query.fechaCompleta BETWEEN :from AND :to')
                ->setParameter('from', $initialDate)
                ->setParameter('to', $endDate);
    }

}
